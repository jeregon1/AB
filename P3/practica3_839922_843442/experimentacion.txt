A continuación se aportan los distintos resultados obtenidos durante la
experimentación de varios casos de estudio:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Recursiva
400 0.081259
20 10 25 15
10 10 0 0
10 10 15 15
8000 0.048494
90 80 70 60
20 30 40 50
10 20 30 40
        Iterativa
400 1.507973
10 10 15 15
10 10 0 0
20 10 25 15
8000 0.329541
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Recursiva
100 0.018836
10 10 15 15
        Iterativa
100 0.033674
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Recursiva
425 0.250480
20 10 25 15
10 10 0 0
10 10 15 15
5 5 15 25
8300 0.362252
90 80 70 60
20 30 40 50
10 20 30 40
20 10 20 20
10 10 10 10
        Iterativa
425 1.545661
5 5 15 25
10 10 15 15
10 10 0 0
20 10 25 15
8300 6.554382
10 10 10 10
20 10 20 20
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 4_tricky.txt ##########
        Recursiva
128 0.067037
8 8 0 0
8 8 8 8
128 0.018721
8 8 0 0
8 8 8 8
        Iterativa
128 0.143134
8 8 8 8
8 8 0 0
128 0.046253
8 8 8 8
8 8 0 0

Como se puede apreciar, se obtienen las mismas soluciones en cuanto a área maximizada, a pesar de que
el order de los artículos elegidos a veces varía.

En cuanto a tiempos, se aprecia cómo el algoritmo iterativo es el que brinda peores resultados. Esto no
debeía de ser así, pero, como se comenta en el informe, en este caso de estudio da peor debido al cálculo
de la tabla de memoización. Si nos fijamos en las soluciones de backtracking y recursiva, observamos cómo
según para qué caso se consigue mejores resultados para uno u otro algoritmo.

*BOLA EXTRA*
Se puede utilizar un algoritmo voraz, aunque no garantiza la solución óptima, como se ve en la prueba 4_tricky.txt.

Una heurística voraz simple y efectiva sería ordenar los artículos por área dividida por el número de superposiciones con otros artículos.
Luego, podemos iterar sobre los artículos ordenados y agregarlos a la solución si no se solapan con ningún otro artículo en la solución.

Resultados obtenidos:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Voraz
400 0.059780
20 10 20 20
10 10 10 10
10 10 0 0
8000 0.030578
90 80 70 60
20 30 40 50
10 20 30 40
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Voraz
100 0.295549
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Voraz
425 0.155225
20 10 20 20
10 10 10 10
10 10 0 0
5 5 15 25
8300 0.131099
90 80 70 60
20 30 40 50
20 10 20 20
10 20 30 40
10 10 10 10
########## Ejecutando pruebas con 4_tricky.txt ##########
        Voraz
100 0.107986
10 10 0 0
100 0.025872
10 10 7 7


            COMPARACIÓN FINAL TIEMPOS (añadiendo backtracking de la P2): 
* 1_prueba.txt
        -Recursiva:     0.059780 + 0.030578 = 0.090358
        -Iterativa:     1.507973 + 0.329541 = 1.837514
        -Backtracking:  0.070784 + 0.072125 = 0.142909
        -Voraz:         0.059780 + 0.030578 = 0.090358
* 2_singleArticle.txt
        -Recursiva:     0.018836
        -Iterativa:     0.033674
        -Backtracking:  0.019003
        -Voraz:         0.295549
* 3_moreArticles.txt
        -Recursiva:     0.250480 + 0.362252 = 0.612732 
        -Iterativa:     1.545661 + 6.554382 = 8.100043
        -Backtracking:  0.187409 + 0.975980 = 1.163389
        -Voraz:         0.155225 + 0.131099 = 0.197400
* 4_tricky.txt
        -Recursiva:     0.067037 + 0.018721 = 0.085758
        -Iterativa:     0.143134 + 0.046253 = 0.189387
        -Backtracking:  0.031732 + 0.006227 = 0.037959
        -Voraz:         0.107986 + 0.025872 = 0.133858
