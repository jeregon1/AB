A continuación se aportan los distintos resultados obtenidos durante la
experimentación de varios casos de estudio:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Recursiva
400 0.106900
20 10 25 15
10 10 0 0
10 10 15 15
8000 0.106800
90 80 70 60
20 30 40 50
10 20 30 40
        Iterativa
400 0.307000
10 10 15 15
10 10 0 0
20 10 25 15
8000 0.555000
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Recursiva
100 0.023800
10 10 15 15
        Iterativa
100 0.043300
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Recursiva
425 0.280000
20 10 25 15
10 10 0 0
10 10 15 15
5 5 15 25
8300 0.581800
90 80 70 60
20 30 40 50
10 20 30 40
20 10 20 20
10 10 10 10
        Iterativa
425 1.716100
5 5 15 25
10 10 15 15
10 10 0 0
20 10 25 15
8300 8.359900
10 10 10 10
20 10 20 20
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 4_tricky.txt ##########
        Recursiva
128 0.071100
8 8 0 0
8 8 8 8
128 0.037600
8 8 0 0
8 8 8 8
        Iterativa
128 0.078700
8 8 8 8
8 8 0 0
128 0.055600
8 8 8 8
8 8 0 0

Como se puede apreciar, se obtienen las mismas soluciones en cuanto a área maximizada, a pesar de que
el order de los artículos elegidos a veces varía.

En cuanto a tiempos, se aprecia cómo la solución por backtracking siempre es la mejor entre las 3 
posibilidades. Entre la solución Recursiva y la solución Iterativa, se aprecia cómo según el caso
de estudio se desempeña mejor un algoritmo que otro.

*BOLA EXTRA*
Se puede utilizar un algoritmo voraz, aunque no garantiza la solución óptima.

Una heurística voraz simple y efectiva sería ordenar los artículos por área dividida por el número de superposiciones con otros artículos.
Luego, podemos iterar sobre los artículos ordenados y agregarlos a la solución si no se solapan con ningún otro artículo en la solución.

Resultados obtenidos:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Voraz
400 0.058500
20 10 20 20
10 10 10 10
10 10 0 0
8000 0.050300
90 80 70 60
20 30 40 50
10 20 30 40
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Voraz
100 0.018000
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Voraz
425 0.091200
20 10 20 20
10 10 10 10
10 10 0 0
5 5 15 25
8300 0.106200
90 80 70 60
20 30 40 50
20 10 20 20
10 20 30 40
10 10 10 10
########## Ejecutando pruebas con 4_tricky.txt ##########
        Voraz
100 0.059100
10 10 0 0
100 0.032400
10 10 7 7


            COMPARACIÓN FINAL TIEMPOS:
* 1_prueba.txt
    -Recursiva: 0.106900 + 0.106800 = 0.213700
    -Iterativa: 0.307000 + 0.555000 = 0.862000
    -P2: 1.223800 + 0.425000 = 1.648800
    -Voraz: 0.058500 + 0.050300 = 0.108800
* 2_singleArticle.txt
    -Recursiva: 0.023800
    -Iterativa: 0.043300
    -P2: 0.114700
    -Voraz: 0.018000
* 3_moreArticles.txt
    -Recursiva: 0.280000 + 0.581800 = 0.861800
    -Iterativa: 0.581800 + 1.716100 = 2.297900
    -P2: 1.916700 + 55.226800 = 57.143500
    -Voraz: 0.091200 + 0.106200 = 0.197400
* 4_tricky.txt
    -Recursiva: 0.071100 + 0.037600 = 0.108700
    -Iterativa: 0.078700 + 0.055600 = 0.134300
    -P2: 0.212900 + 0.075900 = 0.288800
    -Voraz: 0.059100 + 0.032400 = 0.091500
