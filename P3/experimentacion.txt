A continuación se aportan los distintos resultados obtenidos durante la
experimentación de varios casos de estudio:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Recursiva
400 0.309986
20 10 25 15
10 10 0 0
10 10 15 15
8000 0.136958
90 80 70 60
20 30 40 50
10 20 30 40
        Iterativa
400 0.119037
10 10 15 15
10 10 0 0
20 10 25 15
8000 0.174675
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Recursiva
100 0.020459
10 10 15 15
        Iterativa
100 0.045933
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Recursiva
425 0.387772
20 10 25 15
10 10 0 0
10 10 15 15
5 5 15 25
8300 0.851605
90 80 70 60
20 30 40 50
10 20 30 40
20 10 20 20
10 10 10 10
        Iterativa
425 0.803272
5 5 15 25
10 10 15 15
10 10 0 0
20 10 25 15
8300 3.484001
10 10 10 10
20 10 20 20
10 20 30 40
20 30 40 50
90 80 70 60
########## Ejecutando pruebas con 4_tricky.txt ##########
        Recursiva
128 0.031821
8 8 0 0
8 8 8 8
128 0.014300
8 8 0 0
8 8 8 8
        Iterativa
128 0.080838
8 8 8 8
8 8 0 0
128 0.050677
8 8 8 8
8 8 0 0

Como se puede apreciar, se obtienen las mismas soluciones en cuanto a área maximizada, a pesar de que
el order de los artículos elegidos a veces varía.

En cuanto a tiempos, se aprecia cómo la solución por backtracking siempre es la mejor entre las 3 
posibilidades. Entre la solución Recursiva y la solución Iterativa, se aprecia cómo según el caso
de estudio se desempeña mejor un algoritmo que otro.

*BOLA EXTRA*
Se puede utilizar un algoritmo voraz, aunque no garantiza la solución óptima.

Una heurística voraz simple y efectiva sería ordenar los artículos por área dividida por el número de superposiciones con otros artículos.
Luego, podemos iterar sobre los artículos ordenados y agregarlos a la solución si no se solapan con ningún otro artículo en la solución.

Resultados obtenidos:

########## Ejecutando pruebas con 1_prueba.txt ##########
        Voraz
400 0.101714
20 10 20 20
10 10 10 10
10 10 0 0
8000 0.044933
90 80 70 60
20 30 40 50
10 20 30 40
########## Ejecutando pruebas con 2_singleArticle.txt ##########
        Voraz
100 0.028384
10 10 15 15
########## Ejecutando pruebas con 3_moreArticles.txt ##########
        Voraz
425 0.055912
20 10 20 20
10 10 10 10
10 10 0 0
5 5 15 25
8300 0.048901
90 80 70 60
20 30 40 50
20 10 20 20
10 20 30 40
10 10 10 10
########## Ejecutando pruebas con 4_tricky.txt ##########
        Voraz
100 0.046567
10 10 0 0
100 0.011152
10 10 7 7


            COMPARACIÓN FINAL TIEMPOS:
* 1_prueba.txt
    -Recursiva: 0.309986 + 0.136958 = 0.446944
    -Iterativa: 0.119037 + 0.174675 = 0.293712
    -P2: 0.023537 + 0.022055 = 0.045592
    -Voraz: 0.101714 + 0.044933 = 0.146647
* 2_singleArticle.txt
    -Recursiva: 0.020459
    -Iterativa: 0.045933
    -P2: 0.015456
    -Voraz: 0.028384
* 3_moreArticles.txt
    -Recursiva: 0.387772 + 0.851605 = 1.239377
    -Iterativa: 0.803272 + 3.484001 = 4.287273
    -P2: 0.045272 + 0.021096 = 0.066368
    -Voraz: 0.055912 + 0.048901 = 0.104813
* 4_tricky.txt
    -Recursiva: 0.031821 + 0.014300 = 0.046121
    -Iterativa: 0.080838 + 0.050677 = 0.131515
    -P2: 0.015366 + 0.009047
    -Voraz: 0.046567 + 0.011152 = 0.057719
